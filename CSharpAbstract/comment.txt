abstract修饰符指示被修改内容的实现已丢失或不完整。 
abstract修饰符可用于类、方法、属性、索引和事件。 
1.在类声明中使用abstract修饰符来指示某个类仅用作其他类的基类，而不用于自行进行实例化。
2.标记为抽象的成员必须由派生自抽象类的非抽象类来实现。

抽象类具有以下功能：

1.抽象类不能实例化。
2.抽象类可能包含抽象方法和访问器。
3.无法使用sealed修饰符来修改抽象类,因为两个修饰符的含义相反。
  sealed修饰符阻止类被集成，而abstract修饰符要求类被集成。
4.派生自抽象类的非抽象成类，必须包含全部已继承的抽象方法和访问器的实际实现。

在方法或属性声明中使用abstract修饰符，以指示该方法或属性不包含实现。

抽象方法具有以下功能：

1.抽象方法是隐式的虚拟方法。
2.只有抽象类中才允许抽象方法声明。
3.由于抽象方法声明不提供实际的实现,因此没有方法主体;方法声明仅以分号结尾,
  且签名没有大括号({})。例如：
  public abstract void MyMethod();
  实现由override提供，他是非抽象类的成员。
4.在抽象方法中使用static或virtual修饰符是错误的。

除了声明和调用语法方面不同外,抽象属性的行为和抽象方法相似。
1.在静态属性上使用abstract修饰符是错误的。
2.通过包含override修饰符的属性声明,可在派生类中重写抽象集成属性。

实现接口的抽象类有可能将接口方法映射到抽象方法上。例如:







